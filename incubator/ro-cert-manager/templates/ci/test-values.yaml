# Cluster issuers
# The configuration of cluster issuers to setup for cert-manager

# Install the cert-manager for me.
cert-manager:
  enabled: true

clusterIssuers:
  staging:
    # clusterIssuerName: "" #optional
    enabled: true
    email: someone@example.com
    # issuerUrl: "" # Predefined for LetsEncrypt staging
    http:
      enabled: true
    dns:
      # flag to enable/disable all dns configs
      enabled: true

      # Google ClouDNS configurations (optional)
      #
      # Please note that this chart does not create the service account or the
      # kubernetes secret. You will need to go into GCP Project and create an
      # iam service account that can administrate CloudDNS, then take the service
      # account key and put into kubernetes.
      #
      # googleCloudDNS:
      #   name: clouddns                                 # name of provider for kind: Certificate resource
      #   secretName: my-dns-service-account-kube-secret # optional kubernetes secret name in same namespace
      #   secretKey: credentials.json                    # key in the kubernetes secret with the service account creds
      #   gcpProject: myprojectname

      # Amazon Route53 configurations (optional)
      #
      # amazonRoute53:
      #   name: route53                                   # name of provider for kind: Certificate resource
      #   region: us-east-2
      #   hostedZoneID: somethingsomethingplaceholder
      #   secretName: my-aws-credentials-kube-secret
      #   secretKey: key in the secret with the credentials
      #   accessKeyID: my-aws-key-id

      # Inline provider configs provide the ability to define the provider block directly
      # instead of abstacting it
      #
      # inlineProviderConfigs:
      # - name: mycustomprovider
      #   someprovider:
      #     someparamOne: abc
      #     someparamTwo: xyz
    solvers:
      http:
        enabled: true
        # You can use a selector to determine what ingresses will utilize this solver: https://docs.cert-manager.io/en/latest/tasks/issuers/setup-acme/index.html#adding-multiple-solver-types
        # By default it will be set to selector: {} to match all ingresses. You can set up multiple solver types and use the selectors to determine which ingresses use which solver
        #
        # selector:
        #   matchLabels:
        #      use-http-solver: "true"
        #
      dns:
        # flag to enable/disable all dns configs
        enabled: true
        amazonRoute53:
          region: us-east-2
          hostedZoneID: somethingsomethingplaceholder
        # You can use a selector to determine what ingresses will utilize this solver: https://docs.cert-manager.io/en/latest/tasks/issuers/setup-acme/index.html#adding-multiple-solver-types
        # By default it will be set to selector: {} to match all ingresses. You can set up multiple solver types and use the selectors to determine which ingresses use which solver
        #
        # selector:
        #   matchLabels:
        #      use-route53-solver: "true"
        #
        # googleCloudDNS:
        #   secretName: my-dns-service-account-kube-secret # kubernetes secret name in same namespace
        #   secretKey: credentials.json                    # key in the kubernetes secret with the service account creds
        #   gcpProject: myprojectname
  
        # Amazon Route53 configurations (optional)
        #
        # amazonRoute53:
        #   region: us-east-2
        #   hostedZoneID: somethingsomethingplaceholder
  
        # Inline provider configs provide the ability to define the provider block directly
        # instead of abstacting it
        #
        # inlineProviderConfigs:
        # - name: mycustomprovider
        #   someprovider:
        #     someparamOne: abc
        #     someparamTwo: xyz

  production:
    # clusterIssuerName: "" #optional
    enabled: true
    email: someone@example.com
    # issuerUrl: "" # Predefined for LetsEncrypt production
    http:
      enabled: true
    dns:
      # flag to enable/disable all dns configs
      enabled: true
      # Google ClouDNS configurations (optional)
      #
      # Please note that this chart does not create the service account or the
      # kubernetes secret. You will need to go into GCP Project and create an
      # iam service account that can administrate CloudDNS, then take the service
      # account key and put into kubernetes.
      #
      # googleCloudDNS:
      #   secretName: my-dns-service-account-kube-secret # kubernetes secret name in same namespace
      #   secretKey: credentials.json                    # key in the kubernetes secret with the service account creds
      #   gcpProject: myprojectname

      # Amazon Route53 configurations (optional)
      #
      # amazonRoute53:
      #   region: us-east-2
      #   hostedZoneID: somethingsomethingplaceholder

      # Inline provider configs provide the ability to define the provider block directly
      # instead of abstacting it
      #
      # inlineProviderConfigs:
      #   someprovider:
      #     someparamOne: abc
      #     someparamTwo: xyz
    solvers:
      http:
        enabled: true
        # You can use a selector to determine what ingresses will utilize this solver: https://docs.cert-manager.io/en/latest/tasks/issuers/setup-acme/index.html#adding-multiple-solver-types
        # By default it will be set to selector: {} to match all ingresses. You can set up multiple solver types and use the selectors to determine which ingresses use which solver
        #
        # selector:
        #   matchLabels:
        #      use-http-solver: "true"
        #
      dns:
        # flag to enable/disable all dns configs
        enabled: true
        amazonRoute53:
          region: us-east-2
          hostedZoneID: somethingsomethingplaceholder
        # You can use a selector to determine what ingresses will utilize this solver: https://docs.cert-manager.io/en/latest/tasks/issuers/setup-acme/index.html#adding-multiple-solver-types
        # By default it will be set to selector: {} to match all ingresses. You can set up multiple solver types and use the selectors to determine which ingresses use which solver
        #
        # selector:
        #   matchLabels:
        #      use-route53-solver: "true"
        #
        # Google ClouDNS configurations (optional)
        #
        # Please note that this chart does not create the service account or the
        # kubernetes secret. You will need to go into GCP Project and create an
        # iam service account that can administrate CloudDNS, then take the service
        # account key and put into kubernetes.
        #
        # googleCloudDNS:
        #   name: clouddns                                  # name of provider for kind: Certificate resource
        #   secretName: my-dns-service-account-kube-secret # kubernetes secret name in same namespace
        #   secretKey: credentials.json                    # key in the kubernetes secret with the service account creds
        #   gcpProject: myprojectname
  
        # Amazon Route53 configurations (optional)
        #
        # amazonRoute53:
        #   name: route53                                   # name of provider for kind: Certificate resource
        #   region: us-east-2
        #   hostedZoneID: somethingsomethingplaceholder
  
        # Inline provider configs provide the ability to define the provider block directly
        # instead of abstacting it
        #
        # inlineProviderConfigs:
        # - name: mycustomprovider
        #   someprovider:
        #     someparamOne: abc
        #     someparamTwo: xyz
