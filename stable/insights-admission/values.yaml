global:
  proxy:
    # global.proxy.http -- Annotations used to access the proxy servers(http).
    http:
    # global.proxy.https -- Annotations used to access the proxy servers(https).
    https:
    # global.proxy.ftp -- Annotations used to access the proxy servers(ftp).
    ftp:
    # global.proxy.no_proxy -- Annotations to provides a way to exclude traffic destined to certain hosts from using the proxy.
    no_proxy:

insights:
  # insights.organization -- The name of your Organization from Fairwinds Insights
  organization: ""
  # insights.cluster -- The name of your cluster from Fairwinds Insights
  cluster: ""
  # insights.host -- Override the hostname for Fairwinds Insights
  host: https://insights.fairwinds.com
  # insights.base64token -- The token for your cluster from the Cluster Settings page in Fairwinds Insights. This should already be base64 encoded.
  base64token: ""
  secret:
    # -- Create a secret containing the base64 encoded token.
    create: true
    # -- The name of the secret to use.
    nameOverride:
    # -- The suffix to add onto the relase name to get the secret that contains the base64 token
    suffix: "token"
  configmap:
    # -- Create a config map with Insights configuration
    create: true
    # -- The name of the configmap to use.
    nameOverride:
    # -- The suffix to add onto the release name to get the configmap that contains the host/organization/cluster
    suffix: "configmap"

webhookConfig:
  # webhookConfig.failurePolicy -- failurePolicy for the ValidatingWebhookConfiguration.
  # This also informs whether the admission controller blocks validation requests
  # on errors, such as while executing OPA policies.
  failurePolicy: Ignore
  # webhookConfig.matchPolicy -- matchPolicy for the ValidatingWebhookConfiguration
  matchPolicy: Exact
  # webhookConfig.timeoutSeconds -- number of seconds to wait before failing the admission request (max is 30)
  timeoutSeconds: 30
  # webhookConfig.namespaceSelector -- namespaceSelector for the ValidatingWebhookConfiguration
  namespaceSelector:
    matchExpressions:
    - key: control-plane
      operator: DoesNotExist
  # -- Annotations to add to the ValidatingWebhookConfiguration
  annotations: {}
  # webhookConfig.objectSelector -- objectSelector for the ValidatingWebhookConfiguration
  objectSelector: {}
  # webhookConfig.rules -- An array of additional rules for the ValidatingWebhookConfiguration. Each requires a set of apiGroups, apiVersions, operations, resources, and a scope.
  # Rules specified here may also be granted to the Insights OPA plugin,
  # see also the insights-agent chart values for opa.
  rules: []
  # webhookConfig.defaultRules -- An array of rules for commons types for the ValidatingWebhookConfiguration
  defaultRules:
  - apiGroups:
    - apps
    apiVersions:
    - v1
    - v1beta1
    - v1beta2
    operations:
    - CREATE
    - UPDATE
    resources:
    - daemonsets
    - deployments
    - statefulsets
    scope: Namespaced
  - apiGroups:
    - batch
    apiVersions:
    - v1
    - v1beta1
    operations:
    - CREATE
    - UPDATE
    resources:
    - jobs
    - cronjobs
    scope: Namespaced
  - apiGroups:
    - ""
    apiVersions:
    - v1
    operations:
    - CREATE
    - UPDATE
    resources:
    - pods
    - replicationcontrollers
    scope: Namespaced
  # webhookConfig.rulesAutoRBAC -- Automatically add RBAC rules allowing get and list operations for the APIGroups and Resources supplied in rules.
  # This *does not* impact RBAC rules added for `defaultRules`.
  rulesAutoRBAC: true

pluto:
  # pluto.targetVersions -- Pluto target versions specified as key=value[,key=value...].
  # These supersede all defaults in Pluto version files.
  # If unset, the `k8s` component will use the current Kubernetes cluster version.
  # For example: k8s=v1.20.0,cert-manager=v1.8.0
  targetVersions: ""

    #
# resources -- A resources block for the controller.
resources:
  limits:
    cpu: 1
    memory: 2Gi
  requests:
    cpu: 100m
    memory: 128Mi

image:
  # image.repository -- Repository for the Insights Admission Controller image
  repository: quay.io/fairwinds/insights-admission-controller
  # image.pullPolicy -- imagePullPolicy - Highly recommended to leave this as 'Always'
  pullPolicy: Always
  # image.tag -- The Insights admission controller tag to use. Defaults to the Chart's AppVersion
  tag: ""

# imagePullSecrets -- Secrets to use when pulling this image.
imagePullSecrets: []

# replicaCount -- The number of pods to run for the admission contrller.
replicaCount: 2

autoscaling:
  # autoscaling.enabled -- Autoscale instead of a static number of pods running.
  enabled: false
  # autoscaling.minReplicas -- Minimum number of pods to run.
  minReplicas: 2
  # autoscaling.maxReplicas -- Maximum number of pods to run.
  maxReplicas: 5
  # autoscaling.targetCPUUtilizationPercentage -- Target CPU to scale towards.
  targetCPUUtilizationPercentage: 80
  # autoscaling.targetMemoryUtilizationPercentage -- Target memory to scale towards.
  targetMemoryUtilizationPercentage: null

pdb:
  # pdb.enabled -- Create a Pod Disruption Budget (PDB).
  # This also requires `autoscaling.minReplicas` > 1 or `replicaCount` > 1
  enabled: true
  # pdb.minAvailable -- The minimum number of admission controller pods that must still be
  # available after an eviction, expressed as an absolute number or a percentage.
  minAvailable: 1

# nameOverride -- Overrides the name of the release.
nameOverride: ""
# fullnameOverride -- Long name of the release to override.
fullnameOverride: ""

serviceAccount:
  # serviceAccount.create -- Specifies whether a service account should be created
  create: true
  # serviceAccount.annotations -- Annotations to add to the service account
  annotations: {}
  # serviceAccount.name -- The name of the service account to use. If not set and create is true, a name is generated using the fullname template
  name: ""
  rbac:
    # -- Grant the admission controller access to view secrets
    viewSecrets: false
    # -- Grant the admission controller access to a given role (such as view)
    grantRole:
    # -- Grant the admission controller access to additional objects. This should contain an array of objects with each having an array of apiGroups, an array of resources, and an array of verbs. Just like a Role.
    additionalAccess:

# podAnnotations -- Annotations to add to each pod.
podAnnotations: {}

# podSecurityContext -- Security Context for the entire pod.
podSecurityContext: {}
  # fsGroup: 2000

# securityContext -- Security Context for the container.
securityContext:
  allowPrivilegeEscalation: false
  capabilities:
    drop:
    - ALL
  readOnlyRootFilesystem: true
  runAsNonRoot: true
  runAsUser: 15000

service:
  # service.type -- Type of service to create.
  type: ClusterIP
  # service.port -- Port to use for the service.
  port: 443
  # service.usePod443 -- Force binding to port 443 on pods. This is useful for GKE private clusters. Requires running as root
  usePod443: false

# ignoreRequestUsernames -- Specify a comma-separated list of usernames whos admission-requests will be ignored. This is useful for automation that regularly updates in-cluster resources.
ignoreRequestUsernames: "system:addon-manager"

# nodeSelector -- nodSelector to add to the controller.
nodeSelector: {}

# tolerations -- Toleratations to add to the controller.
tolerations: []

# affinity -- Pod affinity/anti-affinity rules
affinity: {}

# caBundle -- If you are providing your own certificate then this is the Certificate Authority for that certificate
caBundle: ""
# secretName -- If you are providing your own certificate then this is the name of the secret holding the certificate.
secretName: ""
# clusterDomain -- The base domain to use for cluster DNS
clusterDomain: cluster.local

# test -- Used for chart CI only - deploys a test deployment
test:
  enabled: false
  image:
    repository: "python"
    tag: "3.10-alpine"
