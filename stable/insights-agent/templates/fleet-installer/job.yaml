{{- if .Values.fleetInstall -}}
{{- $_ := set . "Label" "fleet-installer" }}
apiVersion: batch/v1
kind: Job
metadata:
  {{- include "metadata" . }}
    "helm.sh/hook-weight": "10"
    "helm.sh/hook": pre-install
    # "helm.sh/hook-delete-policy": hook-succeeded,before-hook-creation
spec:
  ttlSecondsAfterFinished: 3000
  backoffLimit: {{ .Values.cronjobs.backoffLimit }}
  template:
    spec:
      restartPolicy: Never
      serviceAccountName: {{ include "insights-agent.fullname" . }}-fleet-installer
      containers:
      - name: fleet-installer
        image: "{{ .Values.cronjobExecutor.image.repository }}:{{ .Values.cronjobExecutor.image.tag }}"
        imagePullPolicy: Always
        command: ["sh"]
        args:
          - -c
          - |
            {{ .Files.Get "download-kubectl.sh" | nindent 12 }}
          
            echo "Checking if cluster already exists..."
            CLUSTER_FILE="/tmp/cluster.json"
            SECRET_NAME="{{ required "You must specify insights.tokenSecretName for a fleet install" .Values.insights.tokenSecretName }}"
            AUTH_HEADER="Authorization: Bearer $ADMIN_TOKEN"
            CLUSTER_URL="{{ .Values.insights.host }}/v0/organizations/{{ .Values.insights.organization }}/clusters/{{ .Values.insights.cluster }}"
            EXISTS=$(curl -s -o $CLUSTER_FILE -w "%{http_code}" "$CLUSTER_URL?showToken=true" -H "$AUTH_HEADER")
            if [[ $EXISTS -eq 404 ]]; then
              echo "Creating cluster..."
              curl -f -X POST "$CLUSTER_URL" -H "$AUTH_HEADER" -o $CLUSTER_FILE
            else
              echo "Cluster already exists"
            fi
            CLUSTER_TOKEN=$(cat $CLUSTER_FILE | sed 's/^.*"AuthToken":"\([^{"}]*\)".*$/\1/')
            kubectl delete secret $SECRET_NAME || echo "Secret $SECRET_NAME does not already exist"
            echo "Creating secret $SECRET_NAME"
            kubectl create secret generic \
              --from-literal="token=$CLUSTER_TOKEN" \
              -n {{ .Release.Namespace }} \
              $SECRET_NAME
            echo "Created secret with auth token"

        resources:
          {{- toYaml .Values.cronjobExecutor.resources | nindent 10 }}
        env:
          - name: ADMIN_TOKEN
            valueFrom:
              secretKeyRef:
                name:  {{ default ( printf "%s-api-token" (include "insights-agent.fullname" .) ) .Values.insights.apiTokenSecretName }}
                key: token
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        securityContext:
          runAsUser: 1000
          readOnlyRootFilesystem: true
          allowPrivilegeEscalation: false
          privileged: false
          runAsNonRoot: true
          capabilities:
            drop:
              - ALL
      volumes:
      - name: tmp
        emptyDir: {}
{{- end -}}
