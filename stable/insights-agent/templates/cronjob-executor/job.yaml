{{- if .Values.cronjobs.runJobsImmediately -}}
{{- $_ := set . "Label" "cronjob-executor" }}
{{- $_ := set . "Config" .Values.cronjobs }}
apiVersion: batch/v1
kind: Job
metadata:
  {{- include "metadata" . }}
    "helm.sh/hook": post-install,post-upgrade
    "helm.sh/hook-delete-policy": hook-succeeded,before-hook-creation
spec:
  ttlSecondsAfterFinished: 3600
  backoffLimit: {{ .Values.cronjobs.backoffLimit }}
  template:
    spec:
      restartPolicy: Never
      serviceAccountName: {{ include "insights-agent.fullname" . }}-cronjob-executor
      containers:
      - name: start-job-from-cronjob
        image: "{{ .Values.cronjobExecutor.image.repository }}:{{ .Values.cronjobExecutor.image.tag }}"
        imagePullPolicy: Always
        command: ["sh"]
        args:
          - -c
          - |
            mkdir /tmp/bin
            export PATH=$PATH:/tmp/bin
            cd /tmp/bin
            # Download kubectl to match the cluster version,
            # using kubectl 1.19 for clusters <= 1.19.
            default_kubectl_version='v1.19.6'
            echo "Downloading jq . . ."
            curl -Lo jq https://github.com/stedolan/jq/releases/download/jq-1.6/jq-linux64 && chmod +x jq
            echo "Getting the Kubernetes version from the API. . ."
            kube_version=$(curl -ks https://kubernetes.default.svc/version?timeout=32s |jq -r .gitVersion)
            kube_minor_version=$(echo $kube_version |cut -d. -f2)
            if [ "x${kube_version}" == "x" ] ; then
              kubectl_version="${default_kubectl_version}"
              echo "Using kubectl version ${kubectl_version} because I was unable to get the Kubernetes cluster version"
            elif [ "$kube_minor_version" -gt 19 ] ; then
              kubectl_version="${kube_version}"
              echo "Using kubectl version ${kubectl_version} to match the cluster"
            else
              kubectl_version="${default_kubectl_version}"
              echo "Using kubectl version ${kubectl_version} because the cluster is <= version 1.19"
            fi
            echo Downloading kubectl version ${kubectl_version}
            curl -Lo kubectl "https://dl.k8s.io/release/${kubectl_version}/bin/linux/amd64/kubectl" && chmod +x kubectl
            # Can't use -o name because it appends cronjob.batch to the beginning
            echo "Cleaning up old jobs. . ."
            kubectl get cj --selector=app=insights-agent -o custom-columns=NAME:.metadata.name --no-headers | xargs -I~job~ sh -c "kubectl delete job ~job~ || echo 'Does Not Exist'"
            echo "Creating jobs. . ."
            kubectl get cj --selector=app=insights-agent -o custom-columns=NAME:.metadata.name --no-headers | xargs -I~job~ kubectl create job ~job~ --from=CronJob/~job~

        resources:
          {{- toYaml .Values.cronjobExecutor.resources | nindent 10 }}
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        securityContext:
          runAsUser: 1000
          readOnlyRootFilesystem: true
          allowPrivilegeEscalation: false
          privileged: false
          runAsNonRoot: true
          capabilities:
            drop:
              - ALL
      volumes:
      - name: tmp
        emptyDir: {}
{{- end -}}
