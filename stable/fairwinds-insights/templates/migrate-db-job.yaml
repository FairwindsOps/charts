apiVersion: batch/v1
kind: Job
metadata:
  name: migrate-database
  annotations:
    "helm.sh/hook-delete-policy": "before-hook-creation"
  {{- if not (or .Values.postgresql.ephemeral .Values.postgresql.postMigrate) }}
    "helm.sh/hook": "pre-install,pre-upgrade"
  {{- else }}
    "helm.sh/hook": "post-install,post-upgrade"
    "helm.sh/hook-weight": "100"
  {{- end }}
  labels:
    {{- include "fairwinds-insights.labels" . | nindent 4 }}
    app.kubernetes.io/component: migrate-db
spec:
  backoffLimit: 5
  template:
    spec:
      restartPolicy: Never
      {{- with .Values.image.pullSecret }}
      imagePullSecrets:
        - name: {{ . }}
      {{- end }}
      {{- if .Values.postgresql.ephemeral }}
      initContainers:
      - name: wait-for-postgresql
        image: "{{ .Values.cronjobExecutor.image.repository }}:{{ .Values.cronjobExecutor.image.tag }}"
        command: ["sh"]
        args:
          - -c
          - |
            echo "Waiting for PostgreSQL cluster to be ready..."
            kubectl wait --for=condition=ready cluster/postgresql.cnpg.io/insights-postgres --timeout=300s
            echo "PostgreSQL cluster is ready!"
        securityContext:
          runAsUser: 1000
          readOnlyRootFilesystem: true
          allowPrivilegeEscalation: false
          privileged: false
          runAsNonRoot: true
          capabilities:
            drop:
              - ALL
      {{- end }}
      containers:
      - name: fwinsights-db-migration
        image: "{{ .Values.migrationImage.repository }}:{{ include "fairwinds-insights.migrationImageTag" . }}"
        imagePullPolicy: Always
        resources:
          {{- toYaml .Values.dbMigration.resources | nindent 10 }}
        {{- include "env" (dict "root" .) | indent 8 }}
        {{- with .Values.options.adminEmail }}
        - name: SETUP_ADMIN_EMAIL
          value: {{ . }}
        {{- end }}
        {{- with .Values.options.organizationName }}
        - name: ADD_SELF_HOSTED
          value: "true"
        - name: SETUP_ORG_NAME
          value: {{ . }}
        {{- end }}
        securityContext:
          readOnlyRootFilesystem: true
          allowPrivilegeEscalation: false
          privileged: false
          runAsNonRoot: false
          runAsUser: {{ .Values.dbMigration.securityContext.runAsUser }}
          capabilities:
            drop:
              - ALL
        volumeMounts:
        - name: polaris-config
          mountPath: /tmp/
      volumes:
      - name: polaris-config
        configMap:
          name: polaris-config
          optional: true
          items:
          - key: polaris-config.json
            path: polaris-config.json
