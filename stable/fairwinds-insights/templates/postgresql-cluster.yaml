{{- if and .Values.postgresql.ephemeral .Values.postgresql.operator.install }}
---
# Minimal RBAC for PostgreSQL cluster creation
apiVersion: v1
kind: ServiceAccount
metadata:
  name: {{ .Release.Name }}-pg-creator
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "fairwinds-insights.labels" . | nindent 4 }}
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: {{ .Release.Name }}-pg-creator
  labels:
    {{- include "fairwinds-insights.labels" . | nindent 4 }}
rules:
- apiGroups: [""]
  resources: ["namespaces"]
  verbs: ["create", "get", "list", "watch", "update", "patch", "delete"]
- apiGroups: ["apiextensions.k8s.io"]
  resources: ["customresourcedefinitions"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
- apiGroups: ["apps"]
  resources: ["deployments", "statefulsets", "daemonsets"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["postgresql.cnpg.io"]
  resources: ["clusters"]
  verbs: ["create", "get", "list", "watch"]
- apiGroups: ["rbac.authorization.k8s.io"]
  resources: ["clusterroles", "clusterrolebindings", "roles", "rolebindings"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete", "bind", "escalate"]
- apiGroups: [""]
  resources: ["serviceaccounts", "services", "configmaps", "secrets", "events"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
- apiGroups: ["admissionregistration.k8s.io"]
  resources: ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
- apiGroups: ["coordination.k8s.io"]
  resources: ["leases"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
- apiGroups: ["events.k8s.io"]
  resources: ["events"]
  verbs: ["create", "patch"]
- apiGroups: ["networking.k8s.io"]
  resources: ["networkpolicies"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
- apiGroups: ["policy"]
  resources: ["poddisruptionbudgets"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
- apiGroups: ["autoscaling"]
  resources: ["horizontalpodautoscalers"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: {{ .Release.Name }}-pg-creator
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "fairwinds-insights.labels" . | nindent 4 }}
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: {{ .Release.Name }}-pg-creator
subjects:
- kind: ServiceAccount
  name: {{ .Release.Name }}-pg-creator
  namespace: {{ .Release.Namespace }}
---
# Case 1: Operator is being installed, so wait for it and create cluster
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ .Release.Name }}-create-postgresql-cluster
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "fairwinds-insights.labels" . | nindent 4 }}
  annotations:
    "meta.helm.sh/release-name": {{ .Release.Name | quote }}
    "meta.helm.sh/release-namespace": {{ .Release.Namespace | quote }}
    "helm.sh/hook": "pre-install"
    "helm.sh/hook-delete-policy": "before-hook-creation,hook-succeeded"
spec:
  backoffLimit: 10
  template:
    spec:
      serviceAccountName: {{ .Release.Name }}-pg-creator
      restartPolicy: Never
      containers:
      - name: create-cluster
        image: "alpine/kubectl:1.33.3"
        command: ["sh"]
        args:
          - -c
          - |+
            set -e
            echo "=== Creating PostgreSQL Cluster (Operator Installation Mode) ==="
            echo "Namespace: {{ .Release.Namespace }}"
            echo "Release: {{ .Release.Name }}"

            # Determine operator namespace
            OPERATOR_NAMESPACE="{{ .Values.postgresql.operator.namespace }}"
            if [ -z "$OPERATOR_NAMESPACE" ]; then
              OPERATOR_NAMESPACE="cnpg-system"
            fi
            echo "Operator namespace: $OPERATOR_NAMESPACE"
            
            # Check if CloudNativePG operator is already installed in any namespace
            EXISTING_OPERATOR=$(kubectl get deployment -l app.kubernetes.io/name=cloudnative-pg --all-namespaces --no-headers -o custom-columns=NAMESPACE:.metadata.namespace 2>/dev/null | head -1 || echo "")
            
            if [ -n "$EXISTING_OPERATOR" ]; then
              echo "Using existing CloudNativePG operator in namespace: $EXISTING_OPERATOR"
              OPERATOR_NAMESPACE="$EXISTING_OPERATOR"
            else
              echo "Installing CloudNativePG operator in namespace: $OPERATOR_NAMESPACE"
                
                # Create namespace if it doesn't exist
                if ! kubectl get namespace "$OPERATOR_NAMESPACE" 2>/dev/null; then
                  kubectl create namespace "$OPERATOR_NAMESPACE"
                fi
                
                # Install CloudNativePG operator using standard YAML manifest
                echo "Installing CloudNativePG operator using standard YAML manifest..."
                kubectl apply --server-side -f https://raw.githubusercontent.com/cloudnative-pg/cloudnative-pg/release-1.27/releases/cnpg-1.27.0.yaml || true
                
                # Verify the installation as per CloudNativePG documentation
                echo "Verifying CloudNativePG operator installation..."
                kubectl get deploy -n cnpg-system cnpg-controller-manager
                
                # Wait for resources to be created
                sleep 10
              
              # Check if the operator deployment exists
              for i in {1..5}; do
                if kubectl get deployment -n cnpg-system cnpg-controller-manager >/dev/null 2>&1; then
                  echo "CloudNativePG operator installed successfully!"
                  OPERATOR_NAMESPACE="cnpg-system"
                  break
                else
                  sleep 5
                fi
              done
              
              # Final check
              if ! kubectl get deployment -n cnpg-system cnpg-controller-manager >/dev/null 2>&1; then
                echo "ERROR: Failed to install CloudNativePG operator"
                exit 1
              fi
            fi
            
            # Wait for webhook server deployment to be ready
            echo "Waiting for webhook server deployment to be ready..."
            kubectl wait --for=condition=available --timeout=300s deployment/cnpg-webhook-server -n $OPERATOR_NAMESPACE
            
            # Check if PostgreSQL cluster already exists
            echo "Checking if PostgreSQL cluster already exists..."
            if kubectl get cluster insights-postgres -n {{ .Release.Namespace }} >/dev/null 2>&1; then
              echo "PostgreSQL cluster 'insights-postgres' already exists in namespace {{ .Release.Namespace }}"
              echo "Skipping cluster creation..."
              exit 0
            fi
            
            # Create the PostgreSQL cluster
            echo "Creating PostgreSQL cluster..."
            cat <<EOF | kubectl apply -f -
            apiVersion: postgresql.cnpg.io/v1
            kind: Cluster
            metadata:
              name: insights-postgres
              namespace: {{ .Release.Namespace }}
              labels:
                {{- include "fairwinds-insights.labels" . | nindent 16 }}
            spec:
              instances: 1
              enableSuperuserAccess: true
              imageName: {{ .Values.postgresql.image.registry }}/{{ .Values.postgresql.image.repository }}:{{ .Values.postgresql.image.tag }}
              postgresql:
                parameters:
{{- toYaml .Values.postgresql.parameters | nindent 18 }}
              bootstrap:
                initdb:
                  database: {{ .Values.postgresql.auth.database }}
                  owner: {{ .Values.postgresql.auth.username }}
                  secret:
                    name: {{ .Values.postgresql.auth.existingSecret }}
              superuserSecret:
                name: {{ .Values.postgresql.auth.existingSecret }}
              storage:
                size: {{ .Values.postgresql.storage.size }}
                {{- if .Values.postgresql.storage.storageClass }}
                storageClass: {{ .Values.postgresql.storage.storageClass }}
                {{- end }}
              resources:
{{- toYaml .Values.postgresql.resources | nindent 16 }}
            EOF
            
            echo "=== PostgreSQL cluster created successfully! ==="
            

            
        securityContext:
          runAsUser: 1000
          readOnlyRootFilesystem: true
          allowPrivilegeEscalation: false
          privileged: false
          runAsNonRoot: true
          capabilities:
            drop:
              - ALL
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: {{ .Release.Name }}-pg-creator
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "fairwinds-insights.labels" . | nindent 4 }}
  annotations:
    "helm.sh/hook": "pre-install,pre-upgrade"
    "helm.sh/hook-weight": "5"
    "helm.sh/hook-delete-policy": "before-hook-creation,hook-succeeded"
{{- else if .Values.postgresql.ephemeral }}
---
# Case 2: Operator is not being installed, but ephemeral is true - create cluster directly
apiVersion: postgresql.cnpg.io/v1
kind: Cluster
metadata:
  name: insights-postgres
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "fairwinds-insights.labels" . | nindent 4 }}
  annotations:
    "helm.sh/hook-delete-policy": "before-hook-creation"
spec:
  instances: 1
  enableSuperuserAccess: true
  imageName: {{ .Values.postgresql.image.registry }}/{{ .Values.postgresql.image.repository }}:{{ .Values.postgresql.image.tag }}
  postgresql:
    parameters:
{{- toYaml .Values.postgresql.parameters | nindent 6 }}
  bootstrap:
    initdb:
      database: {{ .Values.postgresql.auth.database }}
      owner: {{ .Values.postgresql.auth.username }}
      secret:
        name: {{ .Values.postgresql.auth.existingSecret }}
  superuserSecret:
    name: {{ .Values.postgresql.auth.existingSuperUserSecret }}
  storage:
    size: {{ .Values.postgresql.storage.size }}
    storageClass: {{ .Values.postgresql.storage.storageClass }}
  resources:
{{- toYaml .Values.postgresql.resources | nindent 4 }}
{{- end }}
