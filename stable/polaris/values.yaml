# config -- The [polaris configuration](https://github.com/FairwindsOps/polaris#configuration). If not provided then the [default](https://github.com/FairwindsOps/polaris/blob/master/examples/config.yaml) config from Polaris is used.
config: null

image:
  # image.repository -- Image repo
  repository: quay.io/fairwinds/polaris
  # image.tag -- The Polaris Image tag to use. Defaults to the Chart's AppVersion
  tag: ""
  # image.pullPolicy -- Image pull policy
  pullPolicy: Always
  # image.pullSecrets -- Image pull secrets
  pullSecrets: []

rbac:
  # rbac.enabled -- Whether RBAC resources (ClusterRole, ClusterRolebinding) should be created
  enabled: true

serviceAccount:
  # serviceAccount.create -- Specifies whether a service account should be created
  create: true
  # serviceAccount.name -- The name of the service account to use.
  name:

# templateOnly -- Outputs Namespace names, used with `helm template`
templateOnly: false

dashboard:
  # dashboard.basePath -- Path on which the dashboard is served. Defaults to `/`
  basePath: null
  # dashboard.enable -- Whether to run the dashboard.
  enable: true
  # dashboard.port -- Port that the dashboard will run from.
  port: 8080
  # dashboard.listeningAddress -- Dashboard listerning address.
  listeningAddress:
  # dashboard.replicas -- Number of replicas to run.
  replicas: 2
  # dashboard.podAdditionalLabels -- Custom additional labels on dashboard pods.
  podAdditionalLabels: {}
  # dashboard.resources -- Requests and limits for the dashboard
  resources:
    requests:
      cpu: 100m
      memory: 128Mi
    limits:
      cpu: 150m
      memory: 512Mi
  service:
    # dashboard.service.type -- Service Type
    type: ClusterIP
    # dashboard.service.annotations -- Service annotations
    annotations: {}
  # dashboard.nodeSelector -- Dashboard pod nodeSelector
  nodeSelector: {}
  # dashboard.tolerations -- Dashboard pod tolerations
  tolerations: []
  # dashboard.affinity -- Dashboard pods affinity
  affinity: {}
  ingress:
    # dashboard.ingress.enabled -- Whether to enable ingress to the dashboard
    enabled: false
    # dashboard.ingress.ingressClassName -- From Kubernetes 1.18+ this field is supported in case your ingress controller supports it. When set, you do not need to add the ingress class as annotation.
    ingressClassName:
    # dashboard.ingress.hosts -- Web ingress hostnames
    hosts: []
    # dashboard.ingress.annotations -- Web ingress annotations
    annotations: {}
    # dashboard.ingress.tls -- Ingress TLS configuration
    tls: []
  # dashboard.priorityClassName -- Priority Class name to be used in deployment if provided.
  priorityClassName:
  # dashboard.disallowExemptions -- Disallow any exemption
  disallowExemptions: false
  # dashboard.disallowConfigExemptions -- Disallow exemptions that are configured in the config file
  disallowConfigExemptions: false
  # dashboard.disallowAnnotationExemptions -- Disallow exemptions that are configured via annotations
  disallowAnnotationExemptions: false

webhook:
  # webhook.enable -- Whether to run the webhook
  enable: false
  # webhook.validate -- Enables the Validating Webhook, to reject resources with issues
  validate: true
  # webhook.mutate -- Enables the Mutating Webhook, to modify resources with issues
  mutate: false
  # webhook.replicas -- Number of replicas
  replicas: 2
  # webhook.nodeSelector -- Webhook pod nodeSelector
  nodeSelector: {}
  # webhook.tolerations -- Webhook pod tolerations
  tolerations: []
  # webhook.affinity -- Webhook pods affinity
  affinity: {}
  # webhook.caBundle -- CA Bundle to use for Validating Webhook instead of cert-manager
  caBundle: null
  # webhook.secretName -- Name of the secret containing a TLS certificate to use if cert-manager is not used.
  secretName: null
  # webhook.failurePolicy -- failurePolicy for the ValidatingWebhookConfiguration
  failurePolicy: Fail
  # webhook.matchPolicy -- matchPolicy for the ValidatingWebhookConfiguration
  matchPolicy: Exact
  # webhook.namespaceSelector -- namespaceSelector for the ValidatingWebhookConfiguration
  namespaceSelector:
    matchExpressions:
    - key: control-plane
      operator: DoesNotExist
  # webhook.objectSelector -- objectSelector for the ValidatingWebhookConfiguration
  objectSelector: {}
  # webhook.rules -- An array of additional rules for the ValidatingWebhookConfiguration. Each requires a set of apiGroups, apiVersions, operations, resources, and a scope.
  rules: []
  # webhook.mutatingRules -- An array of additional rules for the MutatingWebhookConfiguration. Each requires a set of apiGroups, apiVersions, operations, resources, and a scope.
  mutatingRules: []
  # webhook.defaultRules -- An array of rules for common types for the ValidatingWebhookConfiguration
  defaultRules:
  - apiGroups:
    - apps
    apiVersions:
    - v1
    - v1beta1
    - v1beta2
    operations:
    - CREATE
    - UPDATE
    resources:
    - daemonsets
    - deployments
    - statefulsets
    scope: Namespaced
  - apiGroups:
    - batch
    apiVersions:
    - v1
    - v1beta1
    operations:
    - CREATE
    - UPDATE
    resources:
    - jobs
    - cronjobs
    scope: Namespaced
  - apiGroups:
    - ""
    apiVersions:
    - v1
    operations:
    - CREATE
    - UPDATE
    resources:
    - pods
    - replicationcontrollers
    scope: Namespaced
  # webhook.podAdditionalLabels -- Custom additional labels on webhook pods.
  podAdditionalLabels: {}
  # webhook.resources -- Requests and limits for the webhook.
  resources:
    requests:
      cpu: 100m
      memory: 128Mi
    limits:
      cpu: 100m
      memory: 128Mi
  # webhook.priorityClassName -- Priority Class name to be used in deployment if provided.
  priorityClassName:
  # webhook.disallowExemptions -- Disallow any exemption
  disallowExemptions: false
  # webhook.disallowConfigExemptions -- Disallow exemptions that are configured in the config file
  disallowConfigExemptions: false
  # webhook.disallowAnnotationExemptions -- Disallow exemptions that are configured via annotations
  disallowAnnotationExemptions: false

audit:
  # audit.enable -- Runs a one-time audit. This is used internally at Fairwinds, and may not be useful for others.
  enable: false
  # audit.cleanup -- Whether to delete the namespace once the audit is finished.
  cleanup: false
  # audit.outputURL -- A URL which will receive a POST request with audit results.
  outputURL: ""
